import app from './app';
import debugLib from 'debug';
import http from 'http';

const debug = debugLib('eventsapp:server');
// Default port 3000 if not specified
const port = normalizePort(process.env.PORT || '3030');

// Set the port for the app
app.set('port', port);

// Create the webserver
const server = http.createServer(app);

// Listen on the port
server.listen(port);

// Add an error handler to the webserver
server.on('error', onError);

// Add a handler to print a message when the server is running
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 *
 * @param val - Value to ensure is a valid port
 * @returns a valid port or false if invalid
 */
function normalizePort(val?: string) {
  if (!val) {
    return false;
  }

  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event. Usually happen when creating the server.
 *
 * @param error - Error generated by the HTTP Server
 */
function onError(error: NodeJS.ErrnoException) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  // binding for the port with a check in case we're serving from a named pipe (we aren't)
  let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  // Grab the server address to display (if undefined, say undefined)
  let addr = server.address() || 'undefined';
  // make a message to log where the server is running
  let bind = typeof addr === 'string' ? 'pipe ' + addr : `http://${addr.address === '::' ? 'localhost' : addr.address}:${addr.port}`;
  // Log message for listening
  debug('Listening on ' + bind);
}
